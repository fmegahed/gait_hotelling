#   lapply(function(x) {-x}) %>%
#   lapply(function(x) {t(x) %*% x}) %>%
#   Reduce(f=`+`) %>%
#   `/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
load(file="../Data/RGenerated/T2_ACC_Batch_Phase012.Rdata")
sum(ind[1:l]
)
ind
View(X0)
X0 <- subgroupList[[id]]$Acc$X0
View(X0)
##### Update X0 matrices using T2 values corresponding to the phase 0 subgroups and UCL0
ind <- c(1, sapply(X0, nrow))
ind
sapply(X0, nrow)
n <- sapply(X0, nrow)
n
bb <- seq(n)
class(bb)
is.vector(bb)
length(bb)
bb <- sapply(n, rep, 1)
length(bb)
?rep
?seq_along
seq_along(1:15)
seq_along(10:15)
seq(10)
rep(1, 5)
bb <- sapply(n, rep, x=1)
View(bb)
View(bb[[1]])
bb <- mapply(n, rep, x=1:10)
?mapply
bb <- mapply(function(x,y) {rep(y, n)}, x=n, y=1:10)
bb <- mapply(function(x,y) {rep(y, x)}, x=n, y=1:10)
View(bb)
bb <- mapply(function(x,y) {rep(y, x)}, x=n, y=1:10, simplify=T)
bb <- mapply(function(x,y) {rep(y, x)}, x=n, y=1:10, SIMPLIFY=T)
View(bb)
bb <- mapply(function(x,y) {rep(y, x)}, x=n, y=1:10) %>% do.call(what=c)
View(bb)
n
?split
split(1:10, 1:2)
View(T2)
View(split(T2, bb))
n
View(split(T2, bb)[[1]])
View(split(T2, bb)[[2]])
View(split(T2, f=bb)[[2]])
View(T2)
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
View(tmp)
View(T2 %>% split(f=tmp))
plot(T2, pch=16)
abline(h=UCL0)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {which(x>UCL0)})
OCIdx
View(OCIdx)
View(X0)
X0Updated <- X0 %>% mapply(function(x, y) {x[-y,]}, y=OCIdx)
X0Updated <- X0 %>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx)
View(X0Updated)
OCIdx[[1]]
View(X0[[1]])
View(X0Updated[[1]])
dim(X0Updated[[1]])
N0
n0
sapply(X0, nrow)
aa <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow))
View(aa)
View(aa[[1]])
View(aa)
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {-x}) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
dim(S_w)
aa <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
dim(aa)
all(aa==S_w)
id
length(X1)
############################# Phase1
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
length(X1)
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
dim(X1Mean)
dim(rep.row(X0PooledMean, length(X1)))
#############################
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
dim(rep.row(X0PooledMean, length(X1)))
length(T2)
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% solve(S_w) %*% x)
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
length(T2)
class(sample(T2, 1000*length(T2), replace=T))
length(sample(T2, 1000*length(T2), replace=T))
######################### Bootstrap the T2 values in phase1 to find the 99th percentile
# set.seed(2020) ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
class(sampled)
dim(sampled)
alpha
Tsq_99p <- apply(sampled, 1, quantile, probs=0.99)
class( Tsq_99p)
length(Tsq_99p)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
UCL
######################### Bootstrap the T2 values in phase1 to find the 99th percentile
set.seed(2020) ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
######################### Bootstrap the T2 values in phase1 to find the 99th percentile
set.seed(2020) ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
######################### Bootstrap the T2 values in phase1 to find the 99th percentile
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
UCL
UCL
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% solve(S_w) %*% x)
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
plot(T2)
plot(T2, pch=16)
abline(h=UCL, col="red")
View(subgroupList)
T2
UCL
T2List[[id]] <- list(T2=T2, UCL=UCL)
T2List <- list()
T2List[[id]] <- list(T2=T2, UCL=UCL)
```{r phase 0&1&2}
id <- 2
T2List[[id]] <- list(T2=T2, UCL=UCL)
View(T2List)
names(T2List) <- c(paste0("subject", c(1:2)))
View(T2List)
T2List <- list()
T2List <- list()
for (id in length(subgroupList)) {
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {which(x>UCL0)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
}
id
View(T2List)
T2List <- list()
# for (id in length(subgroupList)) {
id <- 1
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {which(x>UCL0)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
# for (id in length(subgroupList)) {
id <- 2
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {which(x>UCL0)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
View(T2List)
plot(T2List[[1]]$T2, pch=16)
abline(T2List[[1]]$UCL, col="red", lty=1)
abline(h=T2List[[1]]$UCL, col="red", lty=1)
plot(T2List[[2]]$T2, pch=16)
abline(h=T2List[[2]]$UCL, col="red", lty=1)
# for (id in length(subgroupList)) {
id <- 14
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {which(x>UCL0)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
View(X0)
View(X0[[2]])
class(X0[[2]])
dim(X0[[2]])
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
length(X0)
aa <- X0 %>%
lapply(colMeans)
aa <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow))
sapply(X0, nrow)
aa <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F)
View(X0)
UCL0
hist(T2)
plot(T2, pch=16)
abline(h=UCL0, col="red")
X00 <- subgroupList[[id]]$Acc$X0
View(X00)
View(OCIdx)
tmp
View(T2 %>% split(f=tmp))
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {c(which(x>UCL0), 3000)})
View(OCIdx)
# for (id in length(subgroupList)) {
id <- 14
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {c(which(x>UCL0), 3000)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
View(T2List)
plot(T2List[[14]]$T2, pch=16)
abline(h=T2List[[14]]$T2, col="red")
plot(T2List[[14]]$T2, pch=16)
abline(h=T2List[[14]]$UCL, col="red")
T2List <- list()
for (id in length(subgroupList)) {
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {c(which(x>UCL0), 3000)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
}
View(T2List)
length(subgroupList)
T2List <- list()
for (id in seq(length(subgroupList))) {
X0 <- subgroupList[[id]]$Acc$X0
############################# Phase0
############################# Remove single outliers in number of passes
# set.seed(2020) ???????????????????????????
pass <- 1
for (i in 1:pass) {
UCL0 <- BootstrapUCL0(x0=X0, alpha=0.05, iterations=200) # Find in Functions
######################### Find T2 for original X0 and remove outliers from subgroups
X0Pooled <- do.call(rbind, X0)
T2 <- X0Pooled %>% apply(FUN=mean, MARGIN=2) %>%
rep.row(n=nrow(X0Pooled)) %>% -(X0Pooled) %>%
apply(MARGIN=1, function(x) {x %*% ginv(cov(X0Pooled)) %*% x})
tmp <- mapply(function(x,y) {rep(y, x)}, x=sapply(X0, nrow), y=1:10) %>% do.call(what=c)
OCIdx <- T2 %>% split(f=tmp) %>% lapply(function(x) {c(which(x>UCL0), 3000)})
X0 %<>% mapply(FUN=function(x, y) {x[-y,]}, y=OCIdx) # Updated X0 after phase0
}
X0Pooled <- do.call(rbind, X0)
X0PooledMean <- apply(X0Pooled, 2, mean)
############################# Within batch covariance; computed from phase0 after outlier removal
S_w <- X0 %>%
lapply(colMeans) %>%
mapply(FUN=rep.row, sapply(X0, nrow)) %>% # Mean of each subgroup
mapply(FUN=function(x,y) {x-y}, y=X0, SIMPLIFY=F) %>%
lapply(function(x) {t(x) %*% x}) %>%
Reduce(f=`+`) %>%
`/` (sum(lengths(X0)/ncol(X0[[1]])) - length(X0))
############################# Phase1&2
############################# Read phase 1&2 subgroups
X1 <- subgroupList[[id]]$Acc$X1
X2 <- subgroupList[[id]]$Acc$X2
######################### Compute T2 in phase1
X1Mean <- sapply(X1, colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(X1)) %>% -(X1Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
######################### Bootstrap UCL using phase 1 data
set.seed(2020) # ???????????????????????????????????????
sampled <- sample(T2, 1000*length(T2), replace=T) %>% matrix(ncol=length(T2), byrow=T)
UCL <- apply(sampled, 1, quantile, probs=0.99) %>% mean()
######################### T2 for phase2 data
X12Mean <- sapply(c(X1, X2), colMeans) %>% t()
T2 <- rep.row(X0PooledMean, length(c(X1, X2))) %>% -(X12Mean) %>%
apply(MARGIN=1, function(x) x %*% ginv(S_w) %*% x)
T2List[[id]] <- list(T2=T2, UCL=UCL)
}
save.image("C:/Ergonomics lab/Github/gait_hotelling/Markdown/aa.RData")
getwd()
